#!/usr/bin/env node
"use strict";
var fs = require('fs');
const colors = require('colors'); // Used for console output: DO NOT REMOVE
const path = require('path');


/**
 * Get Version of a package (version attribute of package.json)
 *
 * @param packageName to retrieve version from
 */
function getVersion(packageName) {
  return require(packageName + '/package.json').version;
}

/**
 * Include Webda library
 *
 * Resolution order is:
 *  - local library
 *  - local folder
 *  - embedded library
 */
if (fs.existsSync("node_modules/webda")) {
  // Local module of webda exists use it
  global.__webda = process.cwd() + '/node_modules/webda';
  console.log("Using local web" + "da".yellow + " - v" + getVersion(global.__webda));
} else if (fs.existsSync("core.js") && fs.existsSync("services/executor.js")) {
  console.log("Using local web" + "da".yellow + "development version");
  // We are in a webda development directory
  global.__webda = process.cwd();
} else {
  // Use the webda-shell default webda
  global.__webda = 'webda';
  console.log("Using embedded web" + "da".yellow + " - v" + getVersion(global.__webda));
}

global.__webda_shell = __dirname + "/..";
console.log('web' + "da".yellow + "-shell - v" + getVersion(__webda_shell));

/**
 * Add a Promise.each ( should add it to core.js )
 */
if (!Promise.each) {
  Promise.each = function(arr, fn) { // take an array and a function
    // invalid input
    if(!Array.isArray(arr)) return Promise.reject(new Error("Non array passed to each"));
    // empty case
    if(arr.length === 0) return Promise.resolve();
    return arr.reduce(function(prev, cur) {
      return prev.then(() => fn(cur))
    }, Promise.resolve());
  }
}

/**
 * Search for webda.shell.json override or use standard
 */
const Finder = require('fs-finder');
// Find first shell override
var files = [];
if (fs.existsSync('./node_modules')) {
  files = Finder.from('./node_modules').findFiles('webda.shell.json');
}
var consoleService;
if (files.length) {
  let cfg = require(files[0]);
  let dir = path.dirname(files[0]);
  console.log(cfg.name + ' - v' + getVersion(dir).trim());
  consoleService = require(path.join(dir, cfg.handler));
  if (consoleService.default) {
    consoleService = consoleService.default;
  }
} else {
  consoleService = require(global.__webda_shell + '/lib/console/webda').default;
}

/**
 * Commandline parsing
 */
let p = consoleService.handleCommand(process.argv.slice(2));
if (p instanceof Promise || p && p.then) {
  p.then( () => {
    process.exit(0);
  }).catch( (err) => {
    console.log(err);
    process.exit(1);
  });
} else {
  process.exit(0);
}

